;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name turtle.core, :imports nil, :requires {canvas monet.canvas, monet.canvas monet.canvas}, :uses nil, :defs {eat {:protocol-inline nil, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 137, :column 16, :end-line 137, :end-column 19, :export true, :arglists (quote ([]))}, :name turtle.core/eat, :variadic false, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, turtle {:name turtle.core/turtle, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 119, :column 1, :end-line 119, :end-column 16, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 119, :column 10, :end-line 119, :end-column 16}}, ctx {:name turtle.core/ctx, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 36, :column 1, :end-line 36, :end-column 9, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 36, :column 6, :end-line 36, :end-column 9}}, canvas-dom {:name turtle.core/canvas-dom, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 30, :column 1, :end-line 30, :end-column 16, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 30, :column 6, :end-line 30, :end-column 16}}, canvas-width {:name turtle.core/canvas-width, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 27, :column 1, :end-line 27, :end-column 18, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 27, :column 6, :end-line 27, :end-column 18}}, update-turtle {:protocol-inline nil, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 102, :column 7, :end-line 102, :end-column 20, :arglists (quote ([turtle value]))}, :name turtle.core/update-turtle, :variadic false, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :end-column 20, :method-params ([turtle value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([turtle value]))}, canvas-height {:name turtle.core/canvas-height, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 28, :column 1, :end-line 28, :end-column 19, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 28, :column 6, :end-line 28, :end-column 19}}, turtle-entity {:protocol-inline nil, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 108, :column 7, :end-line 108, :end-column 20, :arglists (quote ([turtle]))}, :name turtle.core/turtle-entity, :variadic false, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :end-column 20, :method-params ([turtle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([turtle]))}, lettuce-img {:name turtle.core/lettuce-img, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 21, :column 1, :end-line 21, :end-column 17, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 21, :column 6, :end-line 21, :end-column 17}}, isLettuceNear {:protocol-inline nil, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 121, :column 16, :end-line 121, :end-column 29, :export true, :arglists (quote ([]))}, :name turtle.core/isLettuceNear, :variadic false, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, move {:protocol-inline nil, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 129, :column 16, :end-line 129, :end-column 20, :export true, :arglists (quote ([dir]))}, :name turtle.core/move, :variadic false, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :end-column 20, :method-params ([dir]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dir]))}, turtle-attr {:protocol-inline nil, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 98, :column 7, :end-line 98, :end-column 18, :arglists (quote ([turtle attr]))}, :name turtle.core/turtle-attr, :variadic false, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :end-column 18, :method-params ([turtle attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([turtle attr]))}, draw-items! {:protocol-inline nil, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 78, :column 7, :end-line 78, :end-column 18, :arglists (quote ([]))}, :name turtle.core/draw-items!, :variadic false, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, level {:name turtle.core/level, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 60, :column 1, :end-line 60, :end-column 11, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 60, :column 6, :end-line 60, :end-column 11}}, monet-canvas {:name turtle.core/monet-canvas, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 33, :column 1, :end-line 33, :end-column 18, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 33, :column 6, :end-line 33, :end-column 18}}, rock-img {:name turtle.core/rock-img, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 14, :column 1, :end-line 14, :end-column 14, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 14, :column 6, :end-line 14, :end-column 14}}, on-js-reload {:protocol-inline nil, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 148, :column 7, :end-line 148, :end-column 19, :arglists (quote ([]))}, :name turtle.core/on-js-reload, :variadic false, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, turtle-img {:name turtle.core/turtle-img, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 8, :column 1, :end-line 8, :end-column 16, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 8, :column 6, :end-line 8, :end-column 16}}, draw-grid! {:protocol-inline nil, :meta {:file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :line 39, :column 7, :end-line 39, :end-column 17, :arglists (quote ([]))}, :name turtle.core/draw-grid!, :variadic false, :file "/home/aleksander/Programming/workshops/turtle/src/turtle/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:lettuce :y :turtle-entity :grid :w :h :rocks :x}, :order [:grid :lettuce :rocks :x :y :w :h :turtle-entity]}, :doc nil}